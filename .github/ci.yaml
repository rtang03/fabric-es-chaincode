on:
  pull_request:
    branches: [ main ]

name: CI

env:
  IMAGE_NAME: eventstore-cc

jobs:
  build:
    name: CI
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn cache dir)"
      - uses: actions/cache@v1
        id: yarn-cache # use this to check for `cache-hit` (`steps.yarn-cache.outputs.cache-hit != 'true'`)
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-
      - name: Setup Node.js for use with action
        env:
          ACTIONS_ALLOW_UNSECURE_COMMANDS: true
        uses: actions/setup-node@v2-beta
        with:
          node-version: '12.16.1'
          check-latest: true
      - name: yarn install
        env:
          ACTIONS_ALLOW_UNSECURE_COMMANDS: true
        run: |
          # see https://github.com/rtang03/fabric-es/issues/142
          curl -o- https://raw.githubusercontent.com/creationix/nvm/v0.33.0/install.sh | bash
          export NVM_DIR="$HOME/.nvm"
          [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
          [ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"
          nvm --version
          nvm install v12.16.1
          nvm use v12.16.1
          yarn install
          nvm install v14.0.0
          nvm use v14.0.0
          npm rebuild grpc
          # npm rebuild grpc --target=14.0.0 --target_platform=linux --target_arch=x64 --target_libc=glibc
          nvm use v12.16.1
      - name: lint chaincode
        run: yarn lint
      - name: compile
        run: yarn build
      - name: deploy base 2-org fabric v2.1 network with proxy, postgres, redis, auth
        run: cd /home/runner/work/fabric-es/fabric-es/deployments/dev-net && ./dn-run1.sh
      - name: Run unit tests for chaincode
        run: sudo yarn unit-test:fab
      - name: build image
        run: docker build . --file Dockerfile --tag $IMAGE_NAME
      - name: clean-up
        run: sudo rm -rf /home/runner/work/fabric-es/fabric-es/deployments/dev-net/artifacts
